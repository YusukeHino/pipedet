
import json
import os
import glob
import argparse
import xml.etree.ElementTree as ET

import pandas as pd
annotations = []

def __list_to_csv(output_file):
    global annotations
    # column_name = [
    #     'filename', 'width', 'height', 'class', 'xmin', 'ymin', 'xmax', 'ymax'
    # ]
    # xml_df = pd.DataFrame(annotations, columns=column_name)
    xml_df = pd.DataFrame(annotations)
    xml_df.to_csv(output_file, header=None, index=False ,na_rep=None)


def xml_to_csv(xml_dir, output_file, tag):
    global annotations
    """Reads all XML files, generated by labelImg, from a directory and generates a single CSV file"""
    for xml_file in glob.glob(xml_dir + '/*.xml'):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        width = float(root.find('size')[0].text)
        height = float(root.find('size')[1].text)
        for member in root.findall('object'):
            tag_bndbox = member.find('bndbox')
            value = (tag,
                "gs://mirror-images/img/20200614_1024_1024/"+root.find('filename').text,
                member[0].text,
                float(tag_bndbox[0].text)/width, float(tag_bndbox[1].text)/height,None,None,
                float(tag_bndbox[2].text)/width, float(tag_bndbox[3].text)/height,None,None)
            annotations.append(value)


def json_to_csv(input_json, output_file):
    """Reads a JSON file, generated by the VGG Image Annotator, and generates a single CSV file"""
    with open(input_json) as f:
        images = json.load(f)

    annotations = []

    for entry in images:
        filename = images[entry]['filename']
        for region in images[entry]['regions']:
            c = region['region_attributes']['class']
            xmin = region['shape_attributes']['x']
            ymin = region['shape_attributes']['y']
            xmax = xmin + region['shape_attributes']['width']
            ymax = ymin + region['shape_attributes']['height']
            width = 0
            height = 0

            value = (filename, width, height, c, xmin, ymin, xmax, ymax)
            annotations.append(value)

    __list_to_csv(output_file)


if __name__ == "__main__":
    PATH_ROOT = os.environ["HOME"] + "/data/for_rsm_detection"
    PATH_INPUT = PATH_ROOT + "/cropped_1024_1024"
    PATH_OUTPUT = PATH_ROOT + "/integrated_cropped_1024_1024"
    out_file = "rsm_labels_1024_1024_for_automl.csv"
    path_to_out_file = PATH_OUTPUT + "/" + out_file
    try:
        os.makedirs(PATH_OUTPUT)
    except FileExistsError:
        pass
    tag = ""
    input_dir_list = [i for i in os.listdir(PATH_INPUT)]
    for input_dir in input_dir_list:
        if input_dir.endswith("train"):
            tag = "TRAIN"
        elif input_dir.endswith("validate"):
            tag = "VALIDATE"
        elif input_dir.endswith("test"):
            tag = "TEST"
        xml_to_csv(PATH_INPUT + "/" + input_dir, path_to_out_file, tag)
    __list_to_csv(path_to_out_file)